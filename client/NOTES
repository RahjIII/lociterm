CLIENT DEVELOPMENT NOTES
------------------------
Generally, you only need to run make from the main lociterm directory.  This
file contains lociterm client specific development notes that may (or may not)
need integration into the docs.  -jsj

Webpack provides a really useful development mode for working on the client
code that will push code changes into the browser instance as you work on the
client source code.  To use it, you should first make a full build of lociterm
from the main directory (one up from here), then cd into the server/src
directory and create a locid config file named local.conf with appropriate
settings.  Run a copy of ./locid from the src directory with `./locid -c
local.conf` so that the locid server is up and available.  You might want to
have a MUD running locally too.

From a different window, cd into the client directory (this directory) and run
`npm run serve`.  A new browser tab should open in that window for
http://localhost:5001.  From in that window, hit F11 to open the development
console, and keep the 'npm run serve' window going.  Now when you edit the
client source code, that browser will get the updates whenever you write to the
files without needing a rebuild.

Note that the ./locid will still be serving its files out of the dist
directory, so don't be confused if you connect to it from the usual port and
don't see your updates yet!  You'll need to do a top level make, and restart
./locid to see them.


---------------------------------
Notes on commands that have been run manually while setting up or reconfiguring
the projcect.  -jsj

See: https://www.codeinwp.com/blog/webpack-tutorial-for-beginners/

Commands I've run so far for initial setup...

npm init -y
# --save-dev means the package wont be in the final dist
npm install webpack webpack-cli --save-dev
npm install html-webpack-plugin --save-dev
npm install webpack-dev-server --save-dev
npm install --save-dev style-loader css-loader
npm install file-loader --save-dev
# npm install copy-webpack-plugin --save-dev
# npm install svg-inline-loader --save-dev
npm install html-inline-loader --save-dev

# --save means the package WILL be in the final dist
npm install xterm -save
npm install xterm-addon-web-links -save
npm install xterm-addon-fit -save
npm install xterm-addon-attach -save
npm install xterm-addon-unicode11 -save
npm install xterm-addon-image -save


# I created webpak.config.js by hand from an example.
vi webpack.config.js

# where webpack puts the final product by default
mkdir dist

# default webpack location for the source code you write
mkdir src

# I created src/index.js with vi and edited it.
vi src/index.js

# I created src/index.html with vi and edited it.

# This runs webpack with the defaults
npx webpack

#updated package.json with some build targets so now these work
npm run dev
npm run build 

# added some config to webpack.config.js and package.json to enable a live dev
# server.  you'll want to be running (cd ../server/src; ./locid -c local.conf)
# to have the backend running.
npm run serve


# Note that for testing, this will install the nightly beta of xtermjs
npm install -S xterm@beta --legacy-peer-deps
# this puts it back
npm install -S xterm@5.1.0

# update packages-
# show which are out of date
npm outdated
npm update
# if npm outdated still shows outdated packages, install them @latest
npm outdated
npm install xterm-addon-attach@latest
npm install xterm-addon-fit@latest
npm install xterm-addon-unicode11@latest
npm install xterm-addon-web-links@latest


# Ok, xterm.js is moving to scoped packages, so install with
npm install --save @xterm/xterm
npm install --save @xterm/addon-web-links
npm install --save @xterm/addon-fit
npm install --save @xterm/addon-attach
npm install --save @xterm/addon-unicode11
npm install --save @xterm/addon-image
npm install --save @xterm/addon-webgl

