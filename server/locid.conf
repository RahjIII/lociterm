# LOCID config file

[locid]
# #######################
# Last Outpost Client Implementation Deamon options.
#
# 'log-file' is the full path to where locid should write its logs.  If
# unset, logs go to stderr.
#
# 'vhost_name' is the virtual hostname for the built in webserver.
#
# 'mountpoint' is the place in the document heirarchy that locid appears to
# serve pages from.
#
# 'origin' is the true location on the local filesystem that locid serves pages
# from.
#
# 'default_doc' is the page served to a client when no specific filename is
# requested.
log-file = /usr/local/var/log/locid.log
vhost_name = localhost
mountpoint = /
origin = /usr/local/var/www/lociterm
default_doc = index.html

[ssl]
# ########################
# certificate, keyfile, and authority certificate chain for SSL sessions.  For
# LetsEncrypt keys, you need to define all of these.  For a simple self-signed
# pair, you can comment out the chain.
#
# cert = cert.pem
# key = key.pem
# chain = fullchain.pem
cert = /etc/ssl/certs/loci_cert.pem
key = /etc/ssl/private/loci_key.pem
#chain = /etc/ssl/certs/fullchain.pem

[client]
# ########################
# Client side specific options
#
# 'service' is a port number or service name from /etc/services to listen on
# for clients.  Muditm listens with both IPv4 and IPv6 (if libwebsockets has v6
# compiled in!) on the specififed port.
# 'security' is either 'ssl' for https/wss connections to the client, or 'none'
# for http/ws.
service = 4005
security = ssl
# 'launcher' is the name of a program that can open an URL to the client when
# the --launch option is specified.
launcher = xdg-open

[game]
# ########################
# This defines the one game that all users of the loci client will be sent to.
# Someday, maybe this could evolve into a list of possible games to be offered
# as a choice through the client... but not today.
#
# 'host' is the host name or address of the game server. 
# 'service' is a port number or service name from /etc/services. 
# 'security' is either 'none' for telnet, or 'ssl' for telnets.
host = localhost
service = 4000
security = none

[game-db]
# ########################
# game-db section is for controlling the game server database and how
# suggestions to it are handled.
# 
# 'engine' is the db driver in use, currently 'sqlite3' or 'none'.  If set to
# 'none', no alternate servers will be listed, and no suggestions (if enabled)
# will be saved.
#
# 'location' is the path to the database storage file.
#
# 'suggestions' is the server behavior for suggested hosts.  'closed' means do
# not connect to any suggestions from the client (they'll be saved as
# 'banned'.)  'open' will save the suggestion, try connecting to it, and
# authorize it if it passes the required protocol checks.
#
# 'banned_ports' is a comma-separated list of tcp ports that will not be
# automatically connected to or authorized.
#
# 'min_protocol' sets the minimum required protocol level for automatically
# authorizing a suggestion.  'none' skips this check, 'telnet' requires active
# telnet negotiation, 'mud' requires seeing one of the mud specific telnet
# protocol extensions, such as GMCP, MSSP, or MSDP.  'mssp' requires that the
# suggested server support the MSSP telnet option. ("in band MSSP" does not
# count for this check.)

# engine = sqlite3 
# location = ./lociterm.db 
# suggestions = open 
# banned_ports = 7,9,19,20,21,22,25,26,80,110,143,465 
# min_protocol = mud

engine = sqlite3
location = /usr/local/var/lib/lociterm/lociterm.db
suggestions = open
banned_ports = 1,7,9,19,20,21,22,25,26,53,69,80,110,161,143,443,465,515,587,989,990,993,995,1812,2049,3306,3493
min_protocol = none


